// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: activitylog.sql

package model

import (
	"context"
)

const addActivity = `-- name: AddActivity :exec
INSERT INTO
  "activity_log" ("timestamp", "active")
VALUES
  (?1, ?2)
`

type AddActivityParams struct {
	Timestamp int64 `db:"timestamp" json:"timestamp"`
	Active    int64 `db:"active" json:"active"`
}

// AddActivity
//
//	INSERT INTO
//	  "activity_log" ("timestamp", "active")
//	VALUES
//	  (?1, ?2)
func (q *Queries) AddActivity(ctx context.Context, arg AddActivityParams) error {
	_, err := q.exec(ctx, q.addActivityStmt, addActivity, arg.Timestamp, arg.Active)
	return err
}

const isActive = `-- name: IsActive :one
SELECT
  IFNULL(
    (
      SELECT
        "active"
      FROM
        "activity_log"
      ORDER BY
        "timestamp" DESC
      LIMIT
        1
    ),
    0
  ) AS "active"
`

// IsActive
//
//	SELECT
//	  IFNULL(
//	    (
//	      SELECT
//	        "active"
//	      FROM
//	        "activity_log"
//	      ORDER BY
//	        "timestamp" DESC
//	      LIMIT
//	        1
//	    ),
//	    0
//	  ) AS "active"
func (q *Queries) IsActive(ctx context.Context) (interface{}, error) {
	row := q.queryRow(ctx, q.isActiveStmt, isActive)
	var active interface{}
	err := row.Scan(&active)
	return active, err
}
