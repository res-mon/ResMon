// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: activitylog.sql

package model

import (
	"context"
)

const activeDurations = `-- name: ActiveDurations :many
SELECT
    "outer"."timestamp" AS "start_time",
    (
        SELECT
            MIN("inner"."timestamp")
        FROM
            "activity_log" "inner"
        WHERE
            "inner"."timestamp" > "outer"."timestamp" AND
            "inner"."active" = 0
    ) AS "end_time" -- sqlc:type: *int64
FROM
    "activity_log" "outer"
WHERE
    "outer"."active" = 1
ORDER BY
    "start_time" DESC
`

type ActiveDurationsRow struct {
	StartTime int64       `db:"start_time" json:"startTime"`
	EndTime   interface{} `db:"end_time" json:"endTime"`
}

// ActiveDurations
//
//	SELECT
//	    "outer"."timestamp" AS "start_time",
//	    (
//	        SELECT
//	            MIN("inner"."timestamp")
//	        FROM
//	            "activity_log" "inner"
//	        WHERE
//	            "inner"."timestamp" > "outer"."timestamp" AND
//	            "inner"."active" = 0
//	    ) AS "end_time" -- sqlc:type: *int64
//	FROM
//	    "activity_log" "outer"
//	WHERE
//	    "outer"."active" = 1
//	ORDER BY
//	    "start_time" DESC
func (q *Queries) ActiveDurations(ctx context.Context) ([]ActiveDurationsRow, error) {
	rows, err := q.query(ctx, q.activeDurationsStmt, activeDurations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActiveDurationsRow
	for rows.Next() {
		var i ActiveDurationsRow
		if err := rows.Scan(&i.StartTime, &i.EndTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const addActivity = `-- name: AddActivity :exec
INSERT INTO
    "activity_log" ("timestamp", "active")
VALUES
    (?1, ?2)
`

type AddActivityParams struct {
	Timestamp int64 `db:"timestamp" json:"timestamp"`
	Active    int64 `db:"active" json:"active"`
}

// AddActivity
//
//	INSERT INTO
//	    "activity_log" ("timestamp", "active")
//	VALUES
//	    (?1, ?2)
func (q *Queries) AddActivity(ctx context.Context, arg AddActivityParams) error {
	_, err := q.exec(ctx, q.addActivityStmt, addActivity, arg.Timestamp, arg.Active)
	return err
}

const isActive = `-- name: IsActive :one
SELECT
    CAST(
        IFNULL(
            (
                SELECT
                    "active"
                FROM
                    "activity_log"
                ORDER BY
                    "timestamp" DESC
                LIMIT
                    1
            ),
            0
        ) AS INTEGER
    ) AS "active",
    CAST(
        IFNULL(
            (
                SELECT
                    "timestamp"
                FROM
                    "activity_log"
                ORDER BY
                    "timestamp" DESC
                LIMIT
                    1
            ),
            0
        ) AS INTEGER
    ) AS "timestamp"
`

type IsActiveRow struct {
	Active    int64 `db:"active" json:"active"`
	Timestamp int64 `db:"timestamp" json:"timestamp"`
}

// IsActive
//
//	SELECT
//	    CAST(
//	        IFNULL(
//	            (
//	                SELECT
//	                    "active"
//	                FROM
//	                    "activity_log"
//	                ORDER BY
//	                    "timestamp" DESC
//	                LIMIT
//	                    1
//	            ),
//	            0
//	        ) AS INTEGER
//	    ) AS "active",
//	    CAST(
//	        IFNULL(
//	            (
//	                SELECT
//	                    "timestamp"
//	                FROM
//	                    "activity_log"
//	                ORDER BY
//	                    "timestamp" DESC
//	                LIMIT
//	                    1
//	            ),
//	            0
//	        ) AS INTEGER
//	    ) AS "timestamp"
func (q *Queries) IsActive(ctx context.Context) (IsActiveRow, error) {
	row := q.queryRow(ctx, q.isActiveStmt, isActive)
	var i IsActiveRow
	err := row.Scan(&i.Active, &i.Timestamp)
	return i, err
}
